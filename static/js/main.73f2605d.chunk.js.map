{"version":3,"sources":["App.js","utils/storage.js","serviceWorker.js","index.js"],"names":["App","useState","color","setColor","firstRender","setFirstRender","useEffect","key","value","themes","idx","Math","floor","random","length","storedColor","window","localStorage","getItem","JSON","parse","getFromLS","newColor","setItem","stringify","className","href","id","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QA+GeA,MA3Gf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAsBA,OApBAC,qBAAU,WACR,ICToBC,EAAKC,EDSnBC,EAAS,CAAC,QAAS,QAAS,OAAQ,SAAU,QAC9CC,EAAMC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,QACxCC,ECPe,SAACR,GACxB,IAAMC,EAAQQ,OAAOC,aAAaC,QAAQX,GAE1C,GAAIC,EACF,OAAOW,KAAKC,MAAMZ,GDGEa,CAAU,SAC1BC,EAAWb,EAAOC,GAElBN,EACEW,GAAaZ,EAASY,IAE1BO,EACEb,EAAOC,KAASK,GAAeN,EAAOC,KAASR,EAC3CO,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,SACzCQ,EACNnB,EAASmB,GCrBSf,EDsBV,QCtBeC,EDsBNc,ECrBrBN,OAAOC,aAAaM,QAAQhB,EAAKY,KAAKK,UAAUhB,KDwB9CH,GAAe,KACd,CAACD,IAGF,yBAAKqB,UAAW,WAAavB,GAC3B,yBAAKuB,UAAU,WACb,6BACE,4BACE,uCACA,2CACA,yCAIJ,yBAAKA,UAAU,QACb,8CACA,uFAC4D,IAC1D,gCACE,uBAAGC,KAAK,2BAAR,oCAHJ,mCASA,yNAKA,yNAKA,uDACA,wBAAIC,GAAG,OACL,4BACE,uBAAGD,KAAK,mCAAR,iDAIF,4BACE,uBAAGA,KAAK,uEAAR,uCAIF,4BACE,uBAAGA,KAAK,iDAAR,oCAIF,4BACE,uBAAGA,KAAK,2CAAR,mBAIF,4BACE,uBAAGA,KAAK,uIAAR,4BAIF,4BACE,uBAAGA,KAAK,mCAAR,0CASN,6BACA,yBAAKD,UAAU,UAAf,uBACyB,WACvB,uBAAGC,KAAK,iCAAR,WACC,WACD,uBAAGA,KAAK,yCAAR,YACC,WACD,uBAAGA,KAAK,oCAAR,aE5FUE,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.73f2605d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { setToLS, getFromLS } from \"./utils/storage\";\n\nfunction App() {\n  const [color, setColor] = useState(\"\");\n  const [firstRender, setFirstRender] = useState(true);\n\n  useEffect(() => {\n    const themes = [\"green\", \"white\", \"blue\", \"yellow\", \"pink\"];\n    const idx = Math.floor(Math.random() * themes.length);\n    const storedColor = getFromLS(\"color\");\n    let newColor = themes[idx];\n\n    if (firstRender) {\n      if (storedColor) setColor(storedColor);\n    } else {\n      newColor =\n        themes[idx] === storedColor || themes[idx] === color\n          ? themes[Math.floor(Math.random() * themes.length)]\n          : newColor;\n      setColor(newColor);\n      setToLS(\"color\", newColor);\n    }\n\n    setFirstRender(false);\n  }, [firstRender]);\n\n  return (\n    <div className={\"wrapper \" + color}>\n      <div className=\"content\">\n        <div>\n          <h1>\n            <span>Rahul</span>\n            <span>Deshpande</span>\n            <span>CS@GT</span>\n          </h1>\n        </div>\n\n        <div className=\"info\">\n          <p>Hey! I'm Rahul.</p>\n          <p>\n            I am a graduating third year undergraduate student at the{\" \"}\n            <strong>\n              <a href=\"https://www.gatech.edu/\">\n                Georgia Institute of Technology\n              </a>\n            </strong>\n            , majoring in Computer Science.\n          </p>\n          <p>\n            I'm fascinated by computer science, journalism, data analytics, and\n            what lies at their intersection. I'm passionate about digital\n            civics, the environment, and the future of the internet.\n          </p>\n          <p>\n            When I'm not using a computer, I like to write poetry, learn foreign\n            languages, shoot photos on film, and play the Indian classical flute\n            (the bansuri). Don't hesitate to get in touch :)\n          </p>\n          <p>Some of my involvements:</p>\n          <ul id=\"nav\">\n            <li>\n              <a href=\"https://nique.net/author/rahul/\">\n                Technique Newspaper — Technology Editor\n              </a>\n            </li>\n            <li>\n              <a href=\"https://gatech.campuslabs.com/engage/organization/college-democrats\">\n                College Democrats — President\n              </a>\n            </li>\n            <li>\n              <a href=\"https://https://www.astronomyclub.gatech.edu/\">\n                Astronomy Club — Webmaster\n              </a>\n            </li>\n            <li>\n              <a href=\"https://www.instagram.com/gtwrecktechs/\">\n                OIT Wreck Tech\n              </a>\n            </li>\n            <li>\n              <a href=\"https://www.cc.gatech.edu/mentoring-program#:~:text=Peer%20mentors%20are%20paired%20together,week%20during%20the%20fall%20semester.\">\n                CoC CS 1100 Peer Mentor\n              </a>\n            </li>\n            <li>\n              <a href=\"https://twitter.com/aajaatlanta\">\n                AAJA ATL — Student Coordinator\n              </a>\n            </li>\n          </ul>\n          {/* <p>\n            See my work <a href=\"portfolio.html\">here.</a>\n          </p> */}\n        </div>\n        <hr />\n        <div className=\"footer\">\n          &copy; Rahul Deshpande{\" • \"}\n          <a href=\"https://twitter.com/rsdesh47/\">twitter</a>\n          {\" • \"}\n          <a href=\"https://www.linkedin.com/in/rsdeshpa/\">linkedin</a>\n          {\" • \"}\n          <a href=\"mailto:rahuldeshpande@gatech.edu\">email</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const setToLS = (key, value) => {\n  window.localStorage.setItem(key, JSON.stringify(value));\n};\n\nexport const getFromLS = (key) => {\n  const value = window.localStorage.getItem(key);\n\n  if (value) {\n    return JSON.parse(value);\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}