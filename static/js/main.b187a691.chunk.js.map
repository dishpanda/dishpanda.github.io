{"version":3,"sources":["App.js","serviceWorker.js","index.js","rahul_deshpande_resume.pdf"],"names":["App","className","Container","data-text","style","color","href","Resume","without","rel","target","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oTAgHeA,MAvGf,WACE,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,yBAAKD,UAAU,YACb,wBAAIA,UAAU,kBAAd,cACA,yBAAKA,UAAU,SAASE,YAAU,UAAlC,UAGA,sEAC2C,IACzC,gCACE,uBAAGC,MAAO,CAAEC,MAAO,SAAWC,KAAK,2BAAnC,oCAHJ,mCASA,qIAIA,iTAMA,gCACE,4CAEF,gCACE,uBAAGA,KAAK,oCACN,kBAAC,IAAD,OACG,IACL,uBAAGA,KAAK,2CACN,kBAAC,IAAD,OACG,IACL,uBAAGA,KAAK,gCACN,kBAAC,IAAD,OACG,IACL,uBACEF,MAAO,CAAEC,MAAO,QAChBC,KAAMC,IACNC,SAAO,EACPC,IAAI,sBACJC,OAAO,UAEP,kBAAC,IAAD,OACG,QAKb,yBAAKT,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,mBAAmBU,IAAI,QAAQC,IAAI,oBCvD1CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,qD","file":"static/js/main.b187a691.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container } from \"react-bootstrap\";\n\nimport { GrInstagram, GrGithub, GrDocument } from \"react-icons/gr\";\nimport { GoMailRead } from \"react-icons/go\";\nimport Resume from \"./rahul_deshpande_resume.pdf\";\n\nfunction App() {\n  return (\n    <div className=\"page\">\n      <div className=\"flex-container\">\n        <div className=\"one\">\n          <Container>\n            <div className=\"one-body\">\n              <h3 className=\"text-uppercase\">Hello, I'm</h3>\n              <div className=\"glitch\" data-text=\"Rahul.\">\n                Rahul.\n              </div>\n              <p>\n                I am a rising second year student at the{\" \"}\n                <strong>\n                  <a style={{ color: \"white\" }} href=\"https://www.gatech.edu/\">\n                    Georgia Institute of Technology\n                  </a>\n                </strong>\n                , majoring in Computer Science.\n              </p>\n              <p>\n                I’m fascinated by mathematics, computer science, robotics, and\n                the connections between the three.\n              </p>\n              <p>\n                When I’m not using a computer, I like to write poetry, learn\n                foreign languages, shoot photos on film, and play the Indian\n                classical flute–the bansuri. At a party, you’ll find me talking\n                to anyone who’ll lend an ear. Don’t hesitate to get in touch :)\n              </p>\n              <strong>\n                <em>scroll &raquo;</em>\n              </strong>\n              <footer>\n                <a href=\"mailto:rahuldeshpande@gatech.edu\">\n                  <GoMailRead />\n                </a>{\" \"}\n                <a href=\"https://instagram.com/itsrahuldeshpande\">\n                  <GrInstagram />\n                </a>{\" \"}\n                <a href=\"https://github.com/dishpanda\">\n                  <GrGithub />\n                </a>{\" \"}\n                <a\n                  style={{ color: \"blue\" }}\n                  href={Resume}\n                  without\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  <GrDocument />\n                </a>{\" \"}\n              </footer>\n            </div>\n          </Container>\n        </div>\n        <div className=\"two\">\n          <div className=\"image\">\n            <img className=\"object-fit_cover\" alt=\"rahul\" src=\"rahul.jpeg\" />\n          </div>\n        </div>\n        {/* <div className=\"three\">\n          <div className=\"three-bg\"></div>\n          <Container className=\"\">\n            <h1 className=\"mt-5 display-1\">Work</h1>\n            <ol>\n              <li>\n                <h4>Cal High Robotics</h4>\n                <small className=\"text text-uppercase\">2020-present</small>\n                <ul>\n                  <li>\n                    Team Captain, <em>2016-2020</em>\n                  </li>\n                  <li>\n                    Vice President <em>2018-2019</em>\n                  </li>\n                  <li>\n                    President <em>2019-2020</em>\n                  </li>\n                  <li>\n                    Head Mentor <em>2020-Present</em>\n                  </li>\n                </ul>\n              </li>\n              <li>\n                <h4>Tutor/TA, Ace Academy</h4>{\" \"}\n                <small className=\"text text-uppercase\">summer 2019</small>\n              </li>\n              <li>\n                <h4>Dev Intern, Fiveable</h4>\n                <small className=\"text text-uppercase\">summer 2019</small>\n              </li>\n            </ol>\n          </Container>\n        </div>\n        <div className=\"four\">\n          <Container></Container>\n        </div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/rahul_deshpande_resume.b1fc4d7f.pdf\";"],"sourceRoot":""}